// この関数の内容を変えるだけで自分のゲームに使えます！
// 色々なオプションを変えてください
const set_options = () => {
  // ブロックなどを表すタイルは32ピクセルというサイズのrectで表しています
  const tile_size = 32;

  // tilesに色の文字列か絵文字を使うことができます
  // tiles配列とタイル一つを描く関数tile_draw_functionを新しく作ることで
  // 新しいグラフィックモードを作るのも可能

  // 色は実際のファミコンの色を使いました: http://www.firebrandx.com/nespalette.html
  // 定数扱い
  const sample_color_tiles = [
    "#c3f6f6", // 0 空色
    "#754702", // 1 茶色
    "#b3af0d", // 2 黄色
    "#027645", // 3 緑
    "#983700", // 4 赤
    "#071380", // 5 青
    "#7bc213", // 6 黄緑
  ];
  const sample_emoji_tiles = [
    " ",
    "📦",
    "🎁",
    "📗",
    "👨‍🔧",
    "💦",
    "🐢",
  ];
  const tiles = sample_color_tiles; // タイルに単色の四角を使う場合
  // const tiles = sample_emoji_tiles; // タイルに絵文字を使う場合

  // 一つ一つのタイルを描く関数。
  // 四角バージョン
  const drawSquare = (i, j, tile='#000000', size=32) => {
    fill(tile);
    rect(j * size, i * size, size, size);
  };
  // 絵文字バージョン
  const drawEmoji = (i, j, tile='⛰', size=32) => {
    textSize(size);
    text(tile, j * size, i * size, size, size);
  };
  const tile_draw_function = drawSquare; // タイルに単色の四角を使う場合
  // const tile_draw_function = drawEmoji; // タイルに絵文字を使う場合

  // 各ステージ（面）のマップ。数字は出したい色の tiles でのインデックス
  // 定数扱い
  const stages = [
    [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 1, 2, 1, 2, 1, 0, 0, 3, 3, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0],
      [0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 3, 3, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
    [
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
      [0, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 2, 3, 3, 0, 0],
      [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
      [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0],
      [0, 0, 0, 3, 3, 0, 6, 0, 0, 0, 0, 0, 3, 3, 0, 0],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    ],
  ];
  // 最初に出てくるステージのインデックス
  const starting_stage = 0;

  // この上の設定で、インスタンスを初期化！
  screen = new ScreenScroller(tile_draw_function, starting_stage, tile_size, tiles, stages);
};
